name: Generate F-Droid repo

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
  - cron: "45 2 * * *"

jobs:
  apps:
    name: "Generate repo from apps listing"
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2

      - name: Create basic directory structure
        run: mkdir -p fdroid/repo

      - name: Restore correct mtime
        run: |
          sudo apt install git-restore-mtime 
          git restore-mtime

      - name: Install F-Droid server software
        run: |
         sudo apt-get install fdroidserver

      - name: Set up repo secrets
        run: |
          echo "${{ secrets.KEYSTORE_P12 }}" | base64 -d - > fdroid/keystore.p12

      - name: Get the latest release (draft or normal)
        id: get-latest-release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
        run: |
          # Use GitHub API to fetch all releases
          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/DARC-e-V/50ohm-pocket/releases)
  
          # Check for the latest draft release
          latest_draft=$(echo "$response" | jq -r '.[] | select(.draft == true) | . | {id: .id, name: .name, assets: .assets} | @json' | head -n 1)
  
          if [ -n "$latest_draft" ]; then
            echo "Draft release found."
            release_type="draft"
            release=$(echo "$latest_draft")
          else
            echo "No draft release found. Falling back to the latest normal release."
            release_type="normal"
            release=$(echo "$response" | jq -r '.[] | select(.draft == false) | . | {id: .id, name: .name, assets: .assets} | @json' | head -n 1)
          fi
  
          if [ -z "$release" ]; then
            echo "No releases found."
            exit 1
          fi
  
          # Extract details of the release
          release_name=$(echo "$release" | jq -r '.name')
          apk_url=$(echo "$release" | jq -r '.assets[] | select(.name | endswith(".apk")) | .browser_download_url')
  
          if [ -z "$apk_url" ]; then
            echo "No APK found in the selected release."
            exit 1
          fi
  
          # Output the results
          echo "Latest $release_type release: $release_name"
          echo "APK URL: $apk_url"
          echo "::set-output name=apk_url::$apk_url"
  
        

      - name: Download APK
        run: wget ${{ steps.fetch_apk.outputs.apk_url }} -O app-latest.apk

      - name: Build F-Droid Repo
        run: |
          fdroid update
          fdroid build --clean

      - name: Commit Changes and Push
        env:
          GITHUB_TOKEN: ${{  secrets.GH_ACCESS_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Update F-Droid repository with new APK"
          git push

      - name: Deploy to raw.githubusercontent.com
        run: |
          git branch -M main
          git remote set-url origin https://${{ secrets.GH_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin main
